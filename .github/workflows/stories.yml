name: Generate User Stories
# This workflow is triggered manually via the GitHub Actions UI
# It creates issues in the repository and adds them to the project backlog
# I generate the issues using ChatGpt or GitHub Copilot locally, push them to keep a record, 
# and then run this workflow to create them in the repository. 
# The issues are added to the project backlog for tracking and prioritization.
# This is an experiment to partially automate the issue creation process and use ChatGpt to assist with story definition.

on:
  workflow_dispatch:

jobs:
  create-issues:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup GitHub CLI and dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gh jq

      - name: Create issues and add to project backlog
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          REPO="JRichlen/nppf-raffle-display"
          PROJECT="1"  # GitHub Project backlog (https://github.com/users/JRichlen/projects/1)

          # Function to retrieve an issue number by title (checks all states)
          function get_issue_number() {
              local title="$1"
              gh issue list --state all --repo "$REPO" --json number,title | jq -r --arg title "$title" '.[] | select(.title==$title) | .number'
          }

          ######################################
          # Issue 1: Floating Sidebar Navigation
          ######################################
          TITLE1="Floating Sidebar Navigation"
          read -r -d '' BODY1 <<EOF
          **User Story**: As an admin user, I want a persistent floating sidebar in the admin panel that contains navigation to the Winners List, Settings, and Metrics sections, so I can easily switch between different views.

          **Acceptance Criteria**:
          - The admin panel includes a sidebar that is fixed (always visible) on one side of the screen.
          - The sidebar contains menu items for **Winners**, **Metrics**, and **Settings**.
          - The **Winners List** view is loaded by default when the admin panel opens, and its menu item is highlighted.
          - Clicking on **Metrics** displays the Metrics section; clicking on **Settings** displays the Settings section.
          - The sidebar remains visible while switching views.
          - The main content area is scrollable independently.
          - The implementation uses Material UI components.

          **Dependencies**: None."
          EOF
          
          ISSUE1_NUM=$(get_issue_number "$TITLE1")
          if [ -z "$ISSUE1_NUM" ]; then
              echo "Creating issue: $TITLE1"
              ISSUE1_JSON=$(gh issue create --repo "$REPO" --title "$TITLE1" --body "$BODY1" --label "enhancement" --json number,url)
              ISSUE1_NUM=$(echo "$ISSUE1_JSON" | jq -r '.number')
              ISSUE1_URL=$(echo "$ISSUE1_JSON" | jq -r '.url')
          else
              echo "Issue already exists: $TITLE1 (#$ISSUE1_NUM)"
              ISSUE1_URL=$(gh issue view "$ISSUE1_NUM" --repo "$REPO" --json url | jq -r '.url')
          fi

          echo "Adding issue #$ISSUE1_NUM to project $PROJECT"
          gh project item add --project "$PROJECT" --content "$ISSUE1_URL"

          ######################################
          # Issue 2: Metrics Dashboard Section
          ######################################
          TITLE2="Metrics Dashboard Section"
          read -r -d '' BODY2 <<EOF
          **User Story**: As an admin user, I want to view a dashboard of key raffle metrics, so I can monitor raffle performance.

          **Acceptance Criteria**:
          - A Metrics page is accessible via the sidebar.
          - The page displays key metrics:
          - Time between prize and claims.
          - Count of unique winners.
          - Total number of prizes awarded.
          - A graph shows prizes and claims over time.
          - Metrics update from the current raffle data.
          - The layout uses Material UI components and is scrollable within the main content area.

          **Dependencies**: Depends on: #${ISSUE1_NUM}"
          EOF
          
          ISSUE2_NUM=$(get_issue_number "$TITLE2")
          if [ -z "$ISSUE2_NUM" ]; then
              echo "Creating issue: $TITLE2"
              ISSUE2_JSON=$(gh issue create --repo "$REPO" --title "$TITLE2" --body "$BODY2" --label "enhancement" --json number,url)
              ISSUE2_NUM=$(echo "$ISSUE2_JSON" | jq -r '.number')
              ISSUE2_URL=$(echo "$ISSUE2_JSON" | jq -r '.url')
          else
              echo "Issue already exists: $TITLE2 (#$ISSUE2_NUM)"
              ISSUE2_URL=$(gh issue view "$ISSUE2_NUM" --repo "$REPO" --json url | jq -r '.url')
          fi

          echo "Adding issue #$ISSUE2_NUM to project $PROJECT"
          gh project item add --project "$PROJECT" --content "$ISSUE2_URL"

          ######################################
          # Issue 3: Settings Page and Raffle Reset
          ######################################
          TITLE3="Settings Page and Raffle Reset"
          read -r -d '' BODY3 <<EOF
          **User Story**: As an admin user, I want a Settings page to manage administrative actions, so that control functions like resetting the raffle are organized.

          **Acceptance Criteria**:
          - A Settings page is accessible via the sidebar.
          - The page includes a **Reset Raffle** button that triggers a confirmation prompt.
          - The reset functionality is moved from its previous location.
          - The page is built with Material UI components.
          - The Settings page is scrollable within the main content area.

          **Dependencies**: Depends on: #${ISSUE1_NUM}"
          EOF
          
          ISSUE3_NUM=$(get_issue_number "$TITLE3")
          if [ -z "$ISSUE3_NUM" ]; then
              echo "Creating issue: $TITLE3"
              ISSUE3_JSON=$(gh issue create --repo "$REPO" --title "$TITLE3" --body "$BODY3" --label "enhancement" --json number,url)
              ISSUE3_NUM=$(echo "$ISSUE3_JSON" | jq -r '.number')
              ISSUE3_URL=$(echo "$ISSUE3_JSON" | jq -r '.url')
          else
              echo "Issue already exists: $TITLE3 (#$ISSUE3_NUM)"
              ISSUE3_URL=$(gh issue view "$ISSUE3_NUM" --repo "$REPO" --json url | jq -r '.url')
          fi

          echo "Adding issue #$ISSUE3_NUM to project $PROJECT"
          gh project item add --project "$PROJECT" --content "$ISSUE3_URL"

          ######################################
          # Issue 4: Winner Card Color Customization
          ######################################
          TITLE4="Winner Card Color Customization"
          read -r -d '' BODY4 <<EOF
          **User Story**: As an admin user, I want to change the color theme of winner cards on the display screen via a dropdown in Settings, so I can customize the display appearance.

          **Acceptance Criteria**:
          - A dropdown is available on the Settings page for selecting winner card colors.
          - The dropdown contains predefined color options.
          - Changing the color updates the winner cards immediately.
          - The setting is persisted across sessions.
          - The UI uses Material UI components.

          **Dependencies**: Depends on: #${ISSUE3_NUM}
          EOF
          
          ISSUE4_NUM=$(get_issue_number "$TITLE4")
          if [ -z "$ISSUE4_NUM" ]; then
              echo "Creating issue: $TITLE4"
              ISSUE4_JSON=$(gh issue create --repo "$REPO" --title "$TITLE4" --body "$BODY4" --label "enhancement" --json number,url)
              ISSUE4_NUM=$(echo "$ISSUE4_JSON" | jq -r '.number')
              ISSUE4_URL=$(echo "$ISSUE4_JSON" | jq -r '.url')
          else
              echo "Issue already exists: $TITLE4 (#$ISSUE4_NUM)"
              ISSUE4_URL=$(gh issue view "$ISSUE4_NUM" --repo "$REPO" --json url | jq -r '.url')
          fi

          echo "Adding issue #$ISSUE4_NUM to project $PROJECT"
          gh project item add --project "$PROJECT" --content "$ISSUE4_URL"

          echo "All issues processed."